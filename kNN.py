import os
import numpy as np

def makeNgram(n, lines):
    dic ={}

    for i in range(len(lines)-n+1):
        ngram = ''
        for j in range(n):
            ngram += lines[i+j][:-1] 
        if(ngram in dic):
            dic.update({ngram:dic[ngram]+1})              
        else:
            dic[ngram] = 1
            
    return dic

pathTest0 = 'C:/Users/hwang/OneDrive/바탕 화면/학업/3-2/컴퓨터보안/Assignment#2/program/API/0_test/'
pathTest1 = 'C:/Users/hwang/OneDrive/바탕 화면/학업/3-2/컴퓨터보안/Assignment#2/program/API/1_test/'

pathPre0 = 'C:/Users/hwang/OneDrive/바탕 화면/학업/3-2/컴퓨터보안/Assignment#2/program/API/0_pre/'
pathPre1 = 'C:/Users/hwang/OneDrive/바탕 화면/학업/3-2/컴퓨터보안/Assignment#2/program/API/1_pre/'

# 4-gram 별 IDF 추출
f = open('IDFLIST.txt','r')
lines = f.readlines()

IDFList = {}

for line in lines:
    info = line.split()
    IDFList[info[0]] = float(info[1])  
    
f.close()


testFiles0 = os.listdir(pathTest0)
testFiles1 = os.listdir(pathTest1)
preFiles0 = os.listdir(pathPre0)
preFiles1 = os.listdir(pathPre1)

res0 = []
res1 = []

for testFile0 in testFiles0:
    cosSim0 = []
    cosSim1 = []
    
    f1 = open(pathTest0 + testFile0, 'r')
    line1 = f1.readlines()
    dic1 = makeNgram(4, line1)
    size1 = len(line1) - 3
    
    # 정상 코드와 비교
    for preFile0 in preFiles0:
        f2 = open(pathPre0 + preFile0, 'r')
        line2 = f2.readlines()
        dic2 = makeNgram(4, line2)
        size2 = len(line2) - 3
        
        dotPro = 0
        
        for key in dic1.keys():
            if key in dic2:
                dotPro += (dic1[key] / size1 * IDFList[key]) * (dic2[key] / size2 * IDFList[key])
        
        norm1 = np.linalg.norm(np.array(list(dic1.values())) / size1 * IDFList[key])
        norm2 = np.linalg.norm(np.array(list(dic2.values())) / size2 * IDFList[key])
        
        cosSim = dotPro / (norm1 * norm2)
        
        cosSim0.append(cosSim)
        f2.close()
    
    # 악성 코드와 비교
    for preFile1 in preFiles1:
        f2 = open(pathPre1 + preFile1, 'r')
        line2 = f2.readlines()
        dic2 = makeNgram(4, line2)
        size2 = len(line2) - 3
        
        dotPro = 0
        
        for key in dic1.keys():
            if key in dic2:
                dotPro += (dic1[key] / size1 * IDFList[key]) * (dic2[key] / size2 * IDFList[key])
        
        norm1 = np.linalg.norm(np.array(list(dic1.values())) / size1 * IDFList[key])
        norm2 = np.linalg.norm(np.array(list(dic2.values())) / size2 * IDFList[key])
        
        cosSim = dotPro / (norm1 * norm2)
        
        cosSim1.append(cosSim)
        f2.close()
        
    cosSim0.sort(reverse=True)
    cosSim1.sort(reverse=True)
    
    # kNN classification
    k = 5
    cnt = 0
    mal = 0
    nor = 0
    while(cnt < k):
        if(cosSim0[0] > cosSim1[0]):
            cosSim0.pop(0)
            nor += 1
            cnt += 1
        elif(cosSim0[0] < cosSim1[0]):
            cosSim1.pop(0)
            mal += 1
            cnt += 1
        elif(cosSim0[0] == cosSim[0]):
            cosSim0.pop(0)
            cosSim1.pop(0)
            
    if(mal > nor):
        res0.append('Malware')
    else:
        res0.append('Normal')
            
    
    f1.close()
  
    
    
for testFile1 in testFiles1:
    cosSim0 = []
    cosSim1 = []
    
    f1 = open(pathTest1 + testFile1, 'r')
    line1 = f1.readlines()
    dic1 = makeNgram(4, line1)
    size1 = len(line1) - 3
    
    # 정상 코드와 비교
    for preFile0 in preFiles0:
        f2 = open(pathPre0 + preFile0, 'r')
        line2 = f2.readlines()
        dic2 = makeNgram(4, line2)
        size2 = len(line2) - 3
        
        dotPro = 0
        
        for key in dic1.keys():
            if key in dic2:
                dotPro += (dic1[key] / size1 * IDFList[key]) * (dic2[key] / size2 * IDFList[key])
        
        norm1 = np.linalg.norm(np.array(list(dic1.values())) / size1 * IDFList[key])
        norm2 = np.linalg.norm(np.array(list(dic2.values())) / size2 * IDFList[key])
        
        cosSim = dotPro / (norm1 * norm2)
        
        cosSim0.append(cosSim)
        f2.close()
    
    # 악성 코드와 비교
    for preFile1 in preFiles1:
        f2 = open(pathPre1 + preFile1, 'r')
        line2 = f2.readlines()
        dic2 = makeNgram(4, line2)
        size2 = len(line2) - 3
        
        dotPro = 0
        
        for key in dic1.keys():
            if key in dic2:
                dotPro += (dic1[key] / size1 * IDFList[key]) * (dic2[key] / size2 * IDFList[key])
        
        norm1 = np.linalg.norm(np.array(list(dic1.values())) / size1 * IDFList[key])
        norm2 = np.linalg.norm(np.array(list(dic2.values())) / size2 * IDFList[key])
        
        cosSim = dotPro / (norm1 * norm2)
        
        cosSim1.append(cosSim)
        f2.close()
        
    cosSim0.sort(reverse=True)
    cosSim1.sort(reverse=True)
    
    # kNN classification
    k = 5
    cnt = 0
    mal = 0 
    nor = 0
    while(cnt < k):
        if(cosSim0[0] > cosSim1[0]):
            cosSim0.pop(0)
            nor += 1
            cnt += 1
        elif(cosSim0[0] < cosSim1[0]):
            cosSim1.pop(0)
            mal += 1
            cnt += 1
        elif(cosSim0[0] == cosSim[0]):
            cosSim0.pop(0)
            cosSim1.pop(0)
            
    if(mal > nor):
        res1.append('Malware')
    else:
        res1.append('Normal')
            
    
    f1.close()
        
        
        
