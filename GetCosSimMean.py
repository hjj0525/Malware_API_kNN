import os
import numpy as np

def makeNgram(n, lines):
    dic ={}

    for i in range(len(lines)-n+1):
        ngram = ''
        for j in range(n):
            ngram += lines[i+j][:-1] 
        if(ngram in dic):
            dic.update({ngram:dic[ngram]+1})              
        else:
            dic[ngram] = 1
            
    return dic


path0 = 'C:/Users/hwang/OneDrive/바탕 화면/학업/3-2/컴퓨터보안/Assignment#2/program/API/0_pre'
path1 = 'C:/Users/hwang/OneDrive/바탕 화면/학업/3-2/컴퓨터보안/Assignment#2/program/API/1_pre'
fileList0 = os.listdir(path0)
fileList1 = os.listdir(path1)

# 4-gram 별 IDF 추출
IDFList = {}

f = open('IDFLIST.txt','r')
lines = f.readlines()

for line in lines:
    info = line.split()
    IDFList[info[0]] = float(info[1])  
    
f.close()
    
same = []
notsame = []

cnt = 0
for i in range(len(fileList0)):
    f1 = open('API/0_pre/'+fileList0[i], 'r')
    line1 = f1.readlines()
    dic1 = makeNgram(4, line1)
    size1 = len(line1)-3
    
    for j in range(len(fileList1)):
        f2 = open('API/1_pre/'+fileList1[j], 'r')
        line2 = f2.readlines() 
        dic2 = makeNgram(4, line2)
        size2 = len(line2)-3
        
        dotPro = 0
        for key in dic1.keys():
            if key in dic2:
                dotPro += (dic1[key] / size1 * IDFList[key]) * (dic2[key] / size2 * IDFList[key])
            
        norm1 = np.linalg.norm(np.array(list(dic1.values())) / size1 * IDFList[key])
        norm2 = np.linalg.norm(np.array(list(dic2.values())) / size2 * IDFList[key])
        
        cosSim = dotPro / (norm1 * norm2)
        
        print(cnt)
        notsame.append(cosSim)
        cnt += 1


cnt = 0
for i in range(len(fileList0)):
    f1 = open('API/0_pre/'+fileList0[i], 'r')
    line1 = f1.readlines()
    dic1 = makeNgram(4, line1)
    size1 = len(line1)-3
    for j in range(i+1, len(fileList0)):
        f2 = open('API/0_pre/'+fileList0[j], 'r') 
        line2 = f2.readlines()
        dic2 = makeNgram(4, line2) 
        size2 = len(line2)-3
        
        dotPro = 0
        for key in dic1.keys():
            if key in dic2:
                dotPro += (dic1[key] / size1 * IDFList[key]) * (dic2[key] / size2 * IDFList[key])
            
        norm1 = np.linalg.norm(np.array(list(dic1.values())) / size1 * IDFList[key])
        norm2 = np.linalg.norm(np.array(list(dic2.values())) / size2 * IDFList[key])
        
        cosSim = dotPro / (norm1 * norm2)
        
        print(cnt)
        same.append(cosSim)
        cnt += 1
        
        
sameMean = np.mean(same)
notsameMean = np.mean(notsame)
    
    


